#!/usr/bin/python
# -*- coding: utf-8 -*-

import datetime
import os

# import module snippets
from ansible.module_utils.basic import *
from ansible.module_utils.splitter import *


DOCUMENTATION = '''
---
module: osx_defaults
version_added: historical
short_description: Uses Mac OS X defaults command to change settings
description:
     - Write or delete defaults
     - Read defaults to create a list
options:
  host:
    description:
      - The hostname to apply options to.
    required: true
    default: currentHost
    aliases: []
  domain:
    description:
      - The state of the key
      - domain is ( <domain_name> | -app <application_name> | -globalDomain )
         or a path to a file omitting the '.plist' extension
    required: true
    default: present
    aliases: []
  key:
    description:
      - The state of the key
    required: true
    default: present
    aliases: []
  type:
    description:
      - The type of value
    required: true
    default: None
    aliases: []
  value:
    description:
      - The state of the key
    required: true
    default: present
    aliases: []
  state:
    description:
      - The state of the key
    required: true
    default: present
    aliases: []
notes:
    -  This is awesome.
author: Robby Colvin
'''

EXAMPLES = '''
- osx_defaults: domain=com.apple.dock key=autohide value=true

- osx_defaults: domain=com.apple.dock key=autohide state=absent
'''

TYPE_CHOICES=[
    'bool',
    'data',
    'dict',
    'int',
    'float',
    'string',
]

def run():
    pass

def main():
    executable = '/usr/bin/defaults'

    module = AnsibleModule(
        argument_spec = dict(
            host = dict(default='-currentHost'),
            domain = dict(default='-globalDomain'),
            key = dict(default=None),
            type = dict(choices=TYPE_CHOICES, default=None),
            value = dict(default=None),
            state = dict(choices=['present','absent'], default='present'),
        ),
        add_file_common_args=True,
        supports_check_mode=True
    )

    params = module.params
    host  = params['host']
    domain  = params['domain']
    key  = params['key']
    value  = params['value']
    state  = params['state']

    args = ['/usr/bin/defaults']

    if host != 'currentHost':
        args.append('-host')

    args.append(host)

    if state == 'present':
        check_cmd = ' '.join(args) + ' read ' + domain + ' ' + key
        startd = datetime.datetime.now()
        rc, out, err = module.run_command(check_cmd)
        endd = datetime.datetime.now()
        delta = endd - startd

        if out is None:
            out = ''
        if err is None:
            err = ''

        if out.rstrip() == value:
            module.exit_json(
                cmd      = check_cmd,
                stdout   = out.rstrip("\r\n"),
                stderr   = err.rstrip("\r\n"),
                rc       = rc,
                start    = str(startd),
                end      = str(endd),
                delta    = str(delta),
                changed  = True,
            )

        cmd = 'write'
    else:
        cmd = 'read'

    args.append(cmd)

    if domain:
        args.append(domain)

    args.append(key)

    if value and state == 'present':
        # if value in ['true', ]
        args.append(value)

    startd = datetime.datetime.now()
    rc, out, err = module.run_command(' '.join(args))
    endd = datetime.datetime.now()
    delta = endd - startd

    if out is None:
        out = ''
    if err is None:
        err = ''

    module.exit_json(
        cmd      = args,
        stdout   = out.rstrip("\r\n"),
        stderr   = err.rstrip("\r\n"),
        rc       = rc,
        start    = str(startd),
        end      = str(endd),
        delta    = str(delta),
        changed  = True,
    )

main()

# vim: set ft=python:
